# -*- coding: utf-8 -*-
"""braintumorclassification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lj7bzUB_xkruq7l2Wpb16QwTqNAmc1yK
"""

from zipfile  import ZipFile
filename="brain.zip"
with ZipFile(filename,'r') as brain:
  brain.extractall()
  print("done")

!pip install tensorflow

"""BRAIN TUMOR CLASSIFICATION USING MACHINE LEARNING"""

from google.colab import drive

drive.mount('/content/drive')

!nvidia-smi

import tensorflow as tf
tf.__version__

# importing all the libraries 

from tensorflow.keras.layers import Input, Lambda, Dense, Flatten
from tensorflow.keras.models import Model
from tensorflow.keras.applications.inception_v3 import InceptionV3
from keras.applications.vgg16 import VGG16
from tensorflow.keras.applications.inception_v3 import preprocess_input
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img
from tensorflow.keras.models import Sequential
import numpy as np
from glob import glob
import matplotlib.pyplot as plt

"""setting the train path and testing path from drive"""

# re-size all the images to this /  /content/bt2/Testing
IMAGE_SIZE = [200, 200]

train_path = '/content/bt2/Testing'
valid_path = '/content/bt2/Testing'

from google.colab import drive
drive.mount('/content/drive')

# Import the Vgg 16 library as shown below and add preprocessing layer to the front of VGG
# Here we will be using imagenet weights

inception = InceptionV3(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)

# don't train existing weights
for layer in inception.layers:
    layer.trainable = False

# useful for getting number of output classes
folders = glob('/content/bt2/Training/*')

folders

# our layers - you can add more if you want
x = Flatten()(inception.output)

prediction = Dense(len(folders), activation='softmax')(x)
# create a model object
model = Model(inputs=inception.input, outputs=prediction)

# view the structure of the model
model.summary()

# tell the model what cost and optimization method to use
model.compile(
  loss='categorical_crossentropy',
  optimizer='adam',
  metrics=['accuracy']
)

# Use the Image Data Generator to import the images from the dataset
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

# Make sure you provide the same target size as initialied for the image size
training_set = train_datagen.flow_from_directory('/content/bt2/Training',
                                                 target_size = (200, 200),
                                                 batch_size = 8,
                                                 class_mode = 'categorical')

test_set = test_datagen.flow_from_directory('/content/bt2/Testing',
                                            target_size = (200, 200),
                                            batch_size = 8,
                                            class_mode = 'categorical')

# fit the model

r = model.fit_generator(
  training_set,
  validation_data=test_set,
  epochs=15,
  steps_per_epoch=len(training_set),
  validation_steps=len(test_set)
)

import matplotlib.pyplot as plt

# plot the loss
plt.plot(r.history['loss'], label='train loss')
plt.plot(r.history['val_loss'], label='val loss')
plt.legend()
plt.show()
plt.savefig('LossVal_loss')

# plot the accuracy
plt.plot(r.history['accuracy'], label='train acc')
plt.plot(r.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()
plt.savefig('AccVal_acc')

# save it as a h5 file


from tensorflow.keras.models import load_model

model.save('model_inception.h5')



y_pred = model.predict(test_set)

y_pred

!ls

"""# Extras"""

import numpy as np
y_pred = np.argmax(y_pred, axis=1)

y_pred

training_set[1]

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from keras.preprocessing import image

model=tf.keras.models.load_model("/content/model_inception.h5")

'''import numpy as np
x=np.expand_dims(x,axis=0)
img_data=preprocess_input(x)
img_data.shape'''

model.summary()

loss, acc = model.evaluate(test_set, verbose=2)

loss

acc

from sklearn.metrics import confusion_matrix

"""# prediction"""

!pip install gradio

import gradio as gr

import torch
import requests
from torchvision import transforms

model = tf.keras.models.load_model('/content/drive/MyDrive/Mini Project Paper/code/model_inception.h5')
response = '/content/drive/MyDrive/Mini Project Paper/Dataset/bt2/names.txt'
labels = ['glioma_tumor',
'meningioma_tumor',
'no_tumor',
'pituitary_tumor']

def predict(inp):
  inp = transforms.ToTensor()(inp).unsqueeze(0)
  with torch.no_grad():
    prediction = torch.nn.functional.softmax(model(inp)[0], dim=0)
    confidences = {labels[i]: float(prediction[i]) for i in range(1000)}    
  return confidences

image = gr.inputs.Image(shape=(180,180))
label = gr.outputs.Label(num_top_classes=5)

gr.Interface(fn=predict_image, inputs=image, outputs=label, capture_session =True).launch(debug='True')

demo = gr.Interface(fn=predict, 
             inputs=gr.inputs.Image(type="pil"),
             outputs=gr.outputs.Label(num_top_classes=3),
             )
             
demo.launch()